diff --git a/build.mill b/build.mill
index 043cbeac02f..a39437b6c13 100644
--- a/build.mill
+++ b/build.mill
@@ -252,12 +252,13 @@ object Deps {
   }
 }

-def millVersion: T[String] = Task { VcsVersion.vcsState().format() }
+def millVersion: T[String] = Task { "0.13.0-SCALA3" } // Task { VcsVersion.vcsState().format() }

 def millLastTag: T[String] = Task {
-  VcsVersion.vcsState().lastTag.getOrElse(
-    sys.error("No (last) git tag found. Your git history seems incomplete!")
-  )
+  "0.12.0-RC3"
+  // VcsVersion.vcsState().lastTag.getOrElse(
+  //   sys.error("No (last) git tag found. Your git history seems incomplete!")
+  // )
 }

 def millBinPlatform: T[String] = Task {
@@ -1052,10 +1053,13 @@ def uploadToGithub(authKey: String) = T.command {
   ))

   if (releaseTag == label) {
+    val jsonBlob = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag)
     // TODO: check if the tag already exists (e.g. because we created it manually) and do not fail
     requests.post(
       s"https://api.github.com/repos/${Settings.githubOrg}/${Settings.githubRepo}/releases",
-      data = ujson.Obj("tag_name" -> releaseTag, "name" -> releaseTag),
+      // Scala 3.5.0 bug - without these parens, the `data =` is spliced in the conversion, causing a type error.
+      // hard to replicate!
+      data = (jsonBlob: requests.RequestBlob),
       headers = Seq("Authorization" -> ("token " + authKey))
     )
   }
diff --git a/docs/package.mill b/docs/package.mill
index b870a130a85..a4d75a8ada6 100644
--- a/docs/package.mill
+++ b/docs/package.mill
@@ -186,7 +186,7 @@ object `package` extends RootModule {
     os.write.over(dest / "antora.yml", (lines ++ newLines).mkString("\n"))
   }

-  def githubPagesPlaybookText(authorMode: Boolean) = T.task { extraSources: Seq[os.Path] =>
+  def githubPagesPlaybookText(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
     val taggedSources = for (path <- extraSources) yield {
       s"""    - url: ${build.baseDir}
          |      start_path: ${path.relativeTo(build.baseDir)}
@@ -249,23 +249,23 @@ object `package` extends RootModule {
   }

   def githubPages: T[PathRef] = Task {
-    generatePages(authorMode = false)().apply(oldDocSources().map(_.path))
+    generatePages(authorMode = false).apply().apply(oldDocSources().map(_.path))
   }

   def localPages = Task {
-    val pages = generatePages(authorMode = true)().apply(oldDocSources().map(_.path))
+    val pages = generatePages(authorMode = true).apply().apply(oldDocSources().map(_.path))
     T.log.outputStream.println(
       s"You can browse the local pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
   }
   def fastPages = Task {
-    val pages = generatePages(authorMode = true)().apply(Nil)
+    val pages = generatePages(authorMode = true).apply().apply(Nil)
     T.log.outputStream.println(
       s"You can browse the local pages at: ${(pages.path / "index.html").toNIO.toUri()}"
     )
   }

-  def generatePages(authorMode: Boolean) = T.task { extraSources: Seq[os.Path] =>
+  def generatePages(authorMode: Boolean) = Task.Anon { (extraSources: Seq[os.Path]) =>
     T.log.errorStream.println("Creating Antora playbook ...")
     // dependency to sources
     source()
@@ -274,7 +274,7 @@ object `package` extends RootModule {
     val siteDir = docSite / "site"
     os.write(
       target = playbook,
-      data = githubPagesPlaybookText(authorMode)().apply(extraSources),
+      data = githubPagesPlaybookText(authorMode).apply().apply(extraSources),
       createFolders = true
     )
     T.log.errorStream.println("Running Antora ...")
diff --git a/mill-build/build.mill b/mill-build/build.mill
index 454349f6657..0fba6a9ccc9 100644
--- a/mill-build/build.mill
+++ b/mill-build/build.mill
@@ -4,12 +4,12 @@ import mill.scalalib._

 object `package` extends MillBuildRootModule {
   override def ivyDeps = Agg(
-    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0",
-    ivy"com.github.lolgab::mill-mima::0.1.1",
+    ivy"de.tototec::de.tobiasroeser.mill.vcs.version::0.4.0".withDottyCompat(scalaVersion()),
+    ivy"com.github.lolgab::mill-mima::0.1.1".withDottyCompat(scalaVersion()),
     ivy"net.sourceforge.htmlcleaner:htmlcleaner:2.29",
     // TODO: implement empty version for ivy deps as we do in import parser
     ivy"com.lihaoyi::mill-contrib-buildinfo:${mill.api.BuildInfo.millVersion}",
-    ivy"com.goyeau::mill-scalafix::0.4.1",
+    ivy"com.goyeau::mill-scalafix::0.4.1".withDottyCompat(scalaVersion()),
     ivy"com.lihaoyi::mill-main-graphviz:${mill.api.BuildInfo.millVersion}"
   )
 }
